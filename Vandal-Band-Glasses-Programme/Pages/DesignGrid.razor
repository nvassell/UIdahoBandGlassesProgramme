@using System;
@if(items.Count != 0)
{
    <MudDropContainer T="DropItem" Items="items" CanDropClass="mud-border-info" NoDropClass="mud-border-error" CanDrop="@( (item,identifier ) => items.Count(x => x.Identifier == identifier ) == 0)" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="border-2 border-solid mud-border-lines-default">
        <ChildContent>
            @for (int r = 0; r < settingsFile.numRows; r++)
            {
                var row = r.ToString();
                <div class="d-flex">
                    @for (int c = 0; c < settingsFile.numColumns; c++)
                    {
                        var col = c.ToString();
                        <MudDropZone T="DropItem" Identifier="@($"{row}{col}")" DraggingClass="mud-theme-success" Class="d-flex justify-center align-center border-2 border-solid docs-gray-bg mud-border-lines-default" Style="height:64px;width:64px;" />
                    }
                </div>
            }
        </ChildContent>
        <ItemRenderer>
            <div class="d-flex justify-center align-center flex-grow-1">
                <div class="pa-4 my-4" Style="@($"color:#000000; background:{context.Color};")">
                    <p>
                        @context.Initials
                    </p>
                </div>
                @*<MudIcon Size="Size.Large" Color=Color.Primary>@context.Name</MudIcon>*@
            </div>
        </ItemRenderer>
    </MudDropContainer>
}
<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="AddParticipantsToGrid">Add Participants to Grid</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="ClearParticipantsGrid">Clear Grid</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveCustomGrid">Save Grid</MudButton>
<MudSelect T="string" Label="Change Participant Color" AnchorOrigin="Origin.BottomCenter" @bind-Value="selectedColorParticipant">
    @foreach (var participant in settingsFile.participantList)
    {
        <MudSelectItem Value="@participant" />
    }
</MudSelect>
<MudColorPicker DisableToolbar="false" Label="Participant Color Picker" @bind-Text="colorValue" PickerVariant="PickerVariant.Inline" DisableAlpha="true" />
<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="UpdateColor">UpdateColor</MudButton>

@*@foreach(var item in items)
{
    <p>@item.Name</p>
    <p>@item.Initials</p>
    <p>@item.Color</p>
}*@

<p>@customLayoutJsonString</p>





@code {
    [Parameter]
    public DefaultLayoutModel settingsFile { get; set; } = new DefaultLayoutModel();

    public CustomLayoutModel customLayout = new CustomLayoutModel()
        {
            layoutDetails = new()
        };


    private string customLayoutJsonString = "";

    public List<DropItem> items { get; set; } = new();
    private string colorValue = "";
    private string selectedColorParticipant = "";

    public class DropItem
    {
        public string Initials { get; set; }
        public string Name { get; set; }
        public string Identifier { get; set; }
        public string Color { get; set; } = "#FFFFFF";
    }

    private void ItemUpdated(MudItemDropInfo<DropItem> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }

    private void AddParticipantsToGrid()
    {
        var maxCols = settingsFile.numColumns;
        var maxRows = settingsFile.numRows;
        int colsCount = 0;
        int rowsCount = 0;

        foreach(var participant in settingsFile.participantList)
        {
            var initials = GetInitials(participant);
            items.Add(new DropItem() { Initials = initials, Name = participant ,Identifier = $"{rowsCount}{colsCount}" });
            colsCount++;
            if (colsCount == maxCols)
            {
                colsCount = 0;
                rowsCount++;
            }
        }
    }

    private void ClearParticipantsGrid()
    {
        items.Clear();
    }

    private void SaveCustomGrid()
    {
        customLayout.layoutDetails.Clear();
        customLayoutJsonString = "";
        foreach (var item in items) 
        {
            var positionX = Int32.Parse(item.Identifier.Substring(0, 1));
            var positionY = Int32.Parse(item.Identifier.Substring(1, 1));

            customLayout.layoutDetails.Add(new LayoutDetail() { participant = item.Name, color = item.Color, xPos = positionX, yPos = positionY });
        }
        customLayoutJsonString = JsonSerializer.Serialize(customLayout);

    }

    private void UpdateColor()
    {

        int index = items.FindIndex(item => item.Name == selectedColorParticipant);
        items[index].Color = colorValue;
    }

    static string GetInitials(string name)
    {
        string[] nameSplit = name.Split(new string[] { ",", " " }, StringSplitOptions.RemoveEmptyEntries);

        string initials = "";

        foreach (string item in nameSplit)
        {
            initials += item.Substring(0, 1).ToUpper();
        }

        return initials;
    }
}